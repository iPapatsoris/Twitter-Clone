.IconAndTextWrapper {
  display: flex;
  flex-direction: row;
  position: relative;
  width: min-content;
  --icon-size: 20px;

  // Gap between icon and surrounding circle that appears on hover.
  // Css var can be adjusted by a prop
  --icon-hover-gap: 8px;

  // Height of surrounding hover circle depends on icon size and hover gap
  $icon-hover-height: calc(var(--icon-size) + 2 * var(--icon-hover-gap));

  // Width of hover circle is normally identical to the height, but we store
  // it as an adjustable css var because there is a prop that can make
  // the hover area cover both the icon and the text right after it.
  --icon-hover-width: #{$icon-hover-height};

  // Gap between icon and text after it
  --icon-text-gap: 18px;
  gap: var(--icon-text-gap);

  .Text {
    transition: var(--transition-duration);
  }

  @mixin Hover($bg-color, $color) {
    &:hover,
    &.ForceHover {
      .IconWrapper {
        background-color: $bg-color;
      }

      .Text {
        color: $color;
      }

      .Icon {
        fill: $color;
      }
    }
  }

  &.Hover {
    @include Hover(var(--hover-bg), auto);
  }
  &.HoverPrimary {
    @include Hover(var(--primary-color-transparent), var(--primary-color));
  }
  &.HoverGreen {
    @include Hover(var(--green-color-transparent), var(--green-color));
  }
  &.HoverPink {
    @include Hover(var(--pink-color-transparent), var(--pink-color));
  }

  margin: var(--icon-hover-gap);

  &.NoLeftMargin {
    margin-left: 0;
  }
  &.NoRightMargin {
    margin-right: 0;
  }
  &.NoTopMargin {
    margin-top: 0;
  }
  &.NoBottomMargin {
    margin-bottom: 0;
  }

  &.NoHover {
    margin: 0;
    transition: none;

    .IconWrapper {
      width: auto;
      height: auto;
    }
  }

  &.FullSize {
    width: 100%;
    height: 100%;

    .IconWrapper,
    .RefWrapper,
    .Icon {
      width: 100%;
      height: 100%;
    }
  }

  .IconWrapper {
    position: absolute;
    width: var(--icon-hover-width);

    &.HoverThroughBothIconAndText {
      width: calc(100% + 2 * var(--icon-hover-gap));
    }

    height: $icon-hover-height;
    top: calc(-1 * var(--icon-hover-gap));
    left: calc(-1 * var(--icon-hover-gap));
    border-radius: 40px;
    transition: var(--transition-duration);
    cursor: pointer;

    &.WithBorder {
      outline: 1px solid rgb(207, 217, 222);
    }

    &.WithBackground {
      background-color: var(--primary-color);
      &:hover {
        background-color: rgb(26, 140, 216);
      }
    }
  }

  .RefWrapper {
    display: flex;
    height: min-content;
    width: min-content;
  }

  .Icon {
    width: var(--icon-size);
    height: var(--icon-size);
    cursor: pointer;
    transition: var(--transition-duration);
    fill: var(--light-color);

    &.NoCursorPointer {
      cursor: auto;
    }

    &.Elevate {
      z-index: 1;
      pointer-events: none;
    }
  }
}
