.Minipage {
  height: 100%;
  @include media.multi(mobile, tablet) {
    height: 100vh;
  }

  display: grid;
  --minipage-icon-area-length: 3rem;
  --minipage-blank-area: 1rem;
  grid-template-areas:
    ".       icon    header  .      "
    "content content content content"
    "footer  footer  footer  footer ";
  grid-template-rows: var(--header-height) 1fr auto;
  grid-template-columns:
    var(--minipage-blank-area) minmax(auto, var(--minipage-icon-area-length))
    1fr var(--minipage-blank-area);

  &.AlignContentWithIcon {
    grid-template-areas:
      ".       icon    header  .      "
      ".       content content content"
      "footer  footer  footer  footer ";

    .Content {
      padding-right: var(--minipage-blank-area);
    }
  }

  &.AlignContentWithHeader {
    grid-template-areas:
      ".      icon    header  .      "
      ".      .       content content"
      "footer footer  footer  footer ";

    .Content {
      /** This padding should be equal to the grid's left blank area plus the icon 
         *  area. Normally, content grid area would be only in the center and not 
         *  take up the right area too, but we need to do this to let the scroll bar
         *  stick to the rightmost part of the screen. Right now padding is at a 
         *  "close enough but not exact" value, since the grid's column widths are 
         *  dynamic. In the future, we will be able to graciously get the exact 
         *  spacing by using subgrid. 
         **/
      padding-right: calc(
        var(--minipage-blank-area) + var(--minipage-icon-area-length)
      );
    }
  }

  .Content {
    overflow-y: auto;
    grid-area: content;
    padding-bottom: 4rem;
  }

  .Footer {
    grid-area: footer;
    box-shadow: var(--box-shadow);
    display: grid;
    grid-template:
      ". content ."
      / 1rem auto 1rem;
    align-items: center;
    padding-block: 2rem;

    @include media.mobile {
      padding-block: 1rem;
    }

    .Wrapper {
      grid-area: content;
      align-items: center;
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
  }
}
